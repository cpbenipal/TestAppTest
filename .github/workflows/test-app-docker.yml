name: Run ASP.NET API and NUnit Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: windows-2022

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up NuGet
      uses: NuGet/setup-nuget@v2

    - name: Restore NuGet packages
      run: nuget restore TestApp.sln

    - name: Build solution
      shell: cmd
      run: "\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\" TestApp.sln /p:Configuration=Release"

    - name: Publish Web API to output folder
      run: '& "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" TestApp\TestApp.csproj /p:Configuration=Release /p:DeployOnBuild=true /p:WebPublishMethod=FileSystem /p:PublishProvider=FileSystem /p:PublishDir=published-api'


    - name: List published files
      run: dir published-api

    - name: Build Docker image
      run: docker build -t testapp-api -f Dockerfile .

    - name: Run API container
      run: docker run -d -p 8080:80 --name api testapp-api

    - name: Wait for API to be ready
      shell: pwsh
      run: |
        $maxRetries = 10
        $retry = 0
        while ($retry -lt $maxRetries) {
          try {
            $response = Invoke-WebRequest http://localhost:8080/api/hello -UseBasicParsing -TimeoutSec 10
            if ($response.StatusCode -eq 200) {
              Write-Host " API is up and running"
              break
            }
          } catch {
            Write-Host " Waiting for API to start... ($retry)"
          }
          Start-Sleep -Seconds 5
          $retry++
        }

    - name: Run NUnit tests
      shell: cmd
      run: "\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\Extensions\\TestPlatform\\vstest.console.exe\" TestApp.Tests\\bin\\Release\\TestApp.Tests.dll"

    - name: Cleanup Docker
      if: always()
      run: |
        docker stop api
        docker rm api
